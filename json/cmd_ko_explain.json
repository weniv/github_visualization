[
    {
        "commands": [
            {
                "name": "init",
                "syntax": "git init",
                "description": "새로운 Git 저장소(Repository)를 생성하는 명령어로, 현재 폴더를 기준으로 Git 저장소가 생성됩니다. 이 명령어를 실행하면 일반 폴더에 버전 관리가 가능한 .git이라는 특별한 폴더가 생성되며, 새 프로젝트를 시작하거나 기존 프로젝트를 Git으로 관리하고 싶을 때 사용합니다. init은 저장소를 만들 때 사용하며, Git이 프로젝트의 변경 사항을 추적하기 시작합니다."
            },
            {
                "name": "clone",
                "syntax": "git clone 원격저장소URL",
                "description": "원격 저장소(Remote Repository)를 로컬 저장소(Local Repository)로 복제하는 명령어입니다. 이 명령어를 사용하면 원격 저장소의 전체 복사본(모든 파일과 Git 히스토리)을 로컬에 만들 수 있습니다. clone을 하기 위해서는 저장소(Repository)의 주소(URL)를 알아야 하며, 새로운 프로젝트에 참여하거나 기존 Git 저장소를 복제하고 싶을 때 사용합니다. 이 명령어는 원격 저장소를 \"origin\"이라는 이름으로 자동으로 추가하며, 모든 브랜치와 태그를 가져옵니다."
            },
            {
                "name": "add",
                "syntax": "git add 파일명",
                "description": "변경된 내용을 스테이징 영역에 추가하기 위한 명령어입니다. 스테이징 영역은 commit이 가능한 영역으로, 변경 내용을 라벨링해서 넣어두는 상자라고 생각하면 쉽습니다. 새 파일을 추가하면 Git이 추적할 수 있게 되며, 'git add .'을 사용하면 모든 변경 사항을 한 번에 스테이징할 수 있습니다. 이는 commit 이전에 시행하는 단계로, 스테이징 영역에 등록하지 않은 파일은 커밋 작업에 포함되지 않습니다."
            },
            {
                "name": "commit",
                "syntax": "git commit -m \"커밋메시지\"",
                "description": "변경된 작업들을 저장소에 기록하는 명령어입니다. 코드 변경 시점을 라벨링 해 놓는 것으로, 나중에 파일이 잘못되었을 때 특정 시점으로 돌아갈 수 있게 됩니다. 각 커밋은 고유한 ID를 가지며, 이전 커밋을 참조함으로서 Git으로 하여금 효율적인 버전 관리를 가능하게끔 합니다. '-m' 옵션을 사용하여 커밋 메시지를 직접 입력할 수 있으며, 'commit --amend' 명령어를 사용하면 최신 commit에 대한 메시지나 변경된 파일 추가 등을 수정할 수 있습니다. 단, push 이전의 커밋만 수정 가능합니다."
            },
            {
                "name": "push",
                "syntax": "git push",
                "description": "변경된 작업을 원격 저장소(romote Repository)에 업로드하는 명령어입니다. 로컬 브랜치의 커밋을 원격 저장소로 전송하며, 이를 통해 다른 사람들과 변경사항을 공유할 수 있습니다. push를 하면 GitHub에 추가한 내용들이 반영되어 올라가게 됩니다. 이 명령어를 사용하기 전에 커밋들이 아직 로컬 저장소에 위치해 있으므로 기록한 commit에 문제가 없는지 확인하는 것이 좋습니다."
            },
            {
                "name": "pull",
                "syntax": "git pull",
                "description": "원격 저장소의 변경 사항을 현재 내 폴더에 업데이트하고 자동으로 병합하는 명령어입니다. 다른 팀원의 변경 사항을 내 로컬 저장소에 반영하고 싶을 때 사용합니다. 여러 사람과 한 프로젝트를 진행할 때 주로 사용하며, 자신의 작업을 수행하기 이전에 다른 팀원의 데이터를 끌어오는 것입니다."
            },
            {
                "name": "log",
                "syntax": "git log",
                "description": "커밋이 완료된 기록을 조회할 수 있는 명령어입니다. 지금까지 한 모든 변경 사항의 기록을 보여주며, 각 커밋의 ID, 작성자, 날짜, 그리고 커밋 메시지를 확인할 수 있습니다. 'git log' 실행 후, 키보드의 q를 누르면 로그 화면을 종료하고 명령 프롬프트로 돌아갑니다. 이를 통해 어느 메시지를 커밋했는지 확인함으로써 이전 버전으로 돌아가거나 현재까지의 작업 정도를 확인할 수 있습니다."
            },
            {
                "name": "branch",
                "syntax": "git branch",
                "description": "여러 개발자들이 충돌 오류 없이 다양한 작업을 할 수 있도록 분리된 작업 영역을 만드는 명령어입니다. 새로운 브랜치를 생성하거나 기존 브랜치를 나열, 삭제할 수 있습니다. 처음 초기화하면 master 브랜치 하나가 자동으로 생성되며, 브랜치는 공통된 커밋을 가리키는 지점으로 1개 이상의 브랜치가 필요합니다."
            },
            {
                "name": "checkout",
                "syntax": "git checkout 브랜치명",
                "description": "특정 커밋 시점으로 돌아가거나, 브랜치를 전환할 때 사용하는 명령어입니다. 이 명령어는 현재 브랜치에서 퇴장하여 다른 branch로 이동할 수 있게 해주는 기능을 합니다."
            },
            {
                "name": "status",
                "syntax": "git status",
                "description": "저장소의 상태를 출력하는 명령어입니다. 현재 작업 디렉토리의 상태를 보여주며, 어떤 파일이 변경되었고, 어떤 파일이 스테이징되었는지 확인할 수 있습니다. 현재 어느 브랜치에 있는지, commit하고 싶은 파일들이 add 명령어를 통해 추적되고 있는지 여부를 확인합니다. '-s' 옵션을 사용하면 간단한 형식으로 출력할 수 있으며, 작업 중간중간 현재 상태를 확인하는 것이 좋습니다."
            }
        ],
        "file_location": [
            {
                "name": "작업 디렉터리 (Working Directory)",
                "description": "Working Directory는 파일을 실제로 생성하고 수정하는 공간으로, 현재 작업하고 있는 폴더를 의미합니다. Git은 이 영역의 파일들을 '추적됨(tracked)'과 '추적되지 않음(untracked)'으로 분류하는데, 여기서 생성한 파일은 기본적으로 Git으로부터 untracked 상태입니다. 이는 Git이 아직 관리하지 않는 새로운 파일을 의미하며, git add 명령어로 Staging Area에 추가하면 추적되는 상태가 되어 '.git directory'에 정보가 저장됩니다."
            },
            {
                "name": "스테이징 영역 (Staging Area)",
                "description": "Staging Area는 Working Directory에서 다음 커밋에 포함될 변경 사항이 임시로 저장되는 공간입니다. 이 영역에서는 추적되는 상태의 파일을 실제로 커밋되기 전에 정리하고 구성할 수 있습니다. 'git add' 명령어를 통해 변경된 파일을 Staging Area에 추가할 수 있으며, 이때 해당 파일의 현재 상태가 '.git directory'에 저장됩니다. Staging Area에 있는 파일들만 커밋에 반영되며, 'git commit' 명령어를 사용하여 이들을 Local Repository에 저장할 수 있습니다."
            },
            {
                "name": "로컬 저장소 (Local Repository)",
                "description": "Local Repository는 컴퓨터에 위치한 Git 저장소로, 프로젝트의 전체 버전 기록이 저장됩니다. 'git commit' 명령어로 저장한 모든 내용은 마치 포스트잇 메모를 붙이는 것처럼 기록되며, 변경사항 확정 시 영구적으로 저장됩니다. 각 커밋은 프로젝트의 특정 시점 스냅샷을 나타내며, 네트워크 연결 없이도 버전 관리가 가능합니다. '.git directory'는 버전 관리 시스템의 핵심 컨테이너 역할을 하며, 메타데이터, 객체 데이터베이스, 설정 정보를 포함합니다. Remote Repository와 연결하여 코드를 불러오거나 업로드할 수 있으며, Staging Area에서 'git commit'으로 선별된 커밋과 현재 작업 중인 파일 및 폴더가 이곳에 위치합니다."
            },
            {
                "name": "원격 저장소 (Remote Repository)",
                "description": "Remote Repository는 인터넷상의 프로젝트 복사본으로, GitHub, GitLab, Bitbucket 등의 플랫폼에서 호스팅됩니다. 이는 여러 개발자가 동시에 작업할 수 있는 중앙 집중식 저장소 역할을 하며, 프로젝트의 백업 기능도 수행합니다. 팀 구성원들은 이 허브를 통해 변경사항을 push하고 pull할 수 있어, 동기화된 협업 개발 프로세스를 보장받습니다. Local Repository와 연결된 원격 서버에 존재하며, 모든 개발자와 공동으로 공유할 수 있습니다. git push 명령어를 사용하여 Local Repository에서 커밋을 push하고, git pull을 통해 원격의 변경사항을 로컬로 가져올 수 있습니다."
            }
        ]
    }
]
